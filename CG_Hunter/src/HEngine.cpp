#include <HEngine.h>

std::vector<float> magnifier_vertices = {
-1.0, 0.95, 0.0,
0.0, 0.0, 0.0,
-0.95, 1.0, 0.0,

1.0, 0.95, 0.0,
0.0, 0.0, 0.0,
0.95, 1.0, 0.0,

-1.0, -0.95, 0.0,
0.0, 0.0, 0.0,
-0.95, -1.0, 0.0,

1.0, -0.95, 0.0,
0.0, 0.0, 0.0,
0.95, -1.0, 0.0,

0.8,0,0,
1,0,0,
0.799878,0.0139619,0,
1,0,0,
0.799878,0.0139619,0,
1,0.0174551,0,
0.799878,0.0139619,0,
1,0.0174551,0,
0.799513,0.0279196,0,
1,0.0174551,0,
0.799513,0.0279196,0,
1,0.0349208,0,
0.799513,0.0279196,0,
1,0.0349208,0,
0.798904,0.0418688,0,
1,0.0349208,0,
0.798904,0.0418688,0,
1,0.0524078,0,
0.798904,0.0418688,0,
1,0.0524078,0,
0.798051,0.0558052,0,
1,0.0524078,0,
0.798051,0.0558052,0,
1,0.0699268,0,
0.798051,0.0558052,0,
1,0.0699268,0,
0.796956,0.0697246,0,
1,0.0699268,0,
0.796956,0.0697246,0,
1,0.0874887,0,
0.796956,0.0697246,0,
1,0.0874887,0,
0.795618,0.0836228,0,
1,0.0874887,0,
0.795618,0.0836228,0,
1,0.105104,0,
0.795618,0.0836228,0,
1,0.105104,0,
0.794037,0.0974955,0,
1,0.105104,0,
0.794037,0.0974955,0,
1,0.122785,0,
0.794037,0.0974955,0,
1,0.122785,0,
0.792214,0.111338,0,
1,0.122785,0,
0.792214,0.111338,0,
1,0.140541,0,
0.792214,0.111338,0,
1,0.140541,0,
0.790151,0.125148,0,
1,0.140541,0,
0.790151,0.125148,0,
1,0.158384,0,
0.790151,0.125148,0,
1,0.158384,0,
0.787846,0.138919,0,
1,0.158384,0,
0.787846,0.138919,0,
1,0.176327,0,
0.787846,0.138919,0,
1,0.176327,0,
0.785302,0.152647,0,
1,0.176327,0,
0.785302,0.152647,0,
1,0.19438,0,
0.785302,0.152647,0,
1,0.19438,0,
0.782518,0.166329,0,
1,0.19438,0,
0.782518,0.166329,0,
1,0.212557,0,
0.782518,0.166329,0,
1,0.212557,0,
0.779496,0.179961,0,
1,0.212557,0,
0.779496,0.179961,0,
1,0.230868,0,
0.779496,0.179961,0,
1,0.230868,0,
0.776237,0.193538,0,
1,0.230868,0,
0.776237,0.193538,0,
1,0.249328,0,
0.776237,0.193538,0,
1,0.249328,0,
0.772741,0.207055,0,
1,0.249328,0,
0.772741,0.207055,0,
1,0.267949,0,
0.772741,0.207055,0,
1,0.267949,0,
0.769009,0.22051,0,
1,0.267949,0,
0.769009,0.22051,0,
1,0.286745,0,
0.769009,0.22051,0,
1,0.286745,0,
0.765044,0.233897,0,
1,0.286745,0,
0.765044,0.233897,0,
1,0.305731,0,
0.765044,0.233897,0,
1,0.305731,0,
0.760845,0.247214,0,
1,0.305731,0,
0.760845,0.247214,0,
1,0.32492,0,
0.760845,0.247214,0,
1,0.32492,0,
0.756415,0.260455,0,
1,0.32492,0,
0.756415,0.260455,0,
1,0.344328,0,
0.756415,0.260455,0,
1,0.344328,0,
0.751754,0.273616,0,
1,0.344328,0,
0.751754,0.273616,0,
1,0.36397,0,
0.751754,0.273616,0,
1,0.36397,0,
0.746864,0.286694,0,
1,0.36397,0,
0.746864,0.286694,0,
1,0.383864,0,
0.746864,0.286694,0,
1,0.383864,0,
0.741747,0.299685,0,
1,0.383864,0,
0.741747,0.299685,0,
1,0.404026,0,
0.741747,0.299685,0,
1,0.404026,0,
0.736404,0.312585,0,
1,0.404026,0,
0.736404,0.312585,0,
1,0.424475,0,
0.736404,0.312585,0,
1,0.424475,0,
0.730836,0.325389,0,
1,0.424475,0,
0.730836,0.325389,0,
1,0.445229,0,
0.730836,0.325389,0,
1,0.445229,0,
0.725046,0.338095,0,
1,0.445229,0,
0.725046,0.338095,0,
1,0.466308,0,
0.725046,0.338095,0,
1,0.466308,0,
0.719035,0.350697,0,
1,0.466308,0,
0.719035,0.350697,0,
1,0.487733,0,
0.719035,0.350697,0,
1,0.487733,0,
0.712805,0.363192,0,
1,0.487733,0,
0.712805,0.363192,0,
1,0.509525,0,
0.712805,0.363192,0,
1,0.509525,0,
0.706358,0.375577,0,
1,0.509525,0,
0.706358,0.375577,0,
1,0.531709,0,
0.706358,0.375577,0,
1,0.531709,0,
0.699696,0.387848,0,
1,0.531709,0,
0.699696,0.387848,0,
1,0.554309,0,
0.699696,0.387848,0,
1,0.554309,0,
0.69282,0.4,0,
1,0.554309,0,
0.69282,0.4,0,
1,0.57735,0,
0.69282,0.4,0,
1,0.57735,0,
0.685734,0.41203,0,
1,0.57735,0,
0.685734,0.41203,0,
1,0.600861,0,
0.685734,0.41203,0,
1,0.600861,0,
0.678438,0.423935,0,
1,0.600861,0,
0.678438,0.423935,0,
1,0.624869,0,
0.678438,0.423935,0,
1,0.624869,0,
0.670936,0.435711,0,
1,0.624869,0,
0.670936,0.435711,0,
1,0.649408,0,
0.670936,0.435711,0,
1,0.649408,0,
0.66323,0.447354,0,
1,0.649408,0,
0.66323,0.447354,0,
1,0.674509,0,
0.66323,0.447354,0,
1,0.674509,0,
0.655322,0.458861,0,
1,0.674509,0,
0.655322,0.458861,0,
1,0.700208,0,
0.655322,0.458861,0,
1,0.700208,0,
0.647214,0.470228,0,
1,0.700208,0,
0.647214,0.470228,0,
1,0.726543,0,
0.647214,0.470228,0,
1,0.726543,0,
0.638908,0.481452,0,
1,0.726543,0,
0.638908,0.481452,0,
1,0.753554,0,
0.638908,0.481452,0,
1,0.753554,0,
0.630409,0.492529,0,
1,0.753554,0,
0.630409,0.492529,0,
1,0.781286,0,
0.630409,0.492529,0,
1,0.781286,0,
0.621717,0.503456,0,
1,0.781286,0,
0.621717,0.503456,0,
1,0.809784,0,
0.621717,0.503456,0,
1,0.809784,0,
0.612836,0.51423,0,
1,0.809784,0,
0.612836,0.51423,0,
1,0.8391,0,
0.612836,0.51423,0,
1,0.8391,0,
0.603768,0.524847,0,
1,0.8391,0,
0.603768,0.524847,0,
1,0.869287,0,
0.603768,0.524847,0,
1,0.869287,0,
0.594516,0.535304,0,
1,0.869287,0,
0.594516,0.535304,0,
1,0.900404,0,
0.594516,0.535304,0,
1,0.900404,0,
0.585083,0.545599,0,
1,0.900404,0,
0.585083,0.545599,0,
1,0.932515,0,
0.585083,0.545599,0,
1,0.932515,0,
0.575472,0.555727,0,
1,0.932515,0,
0.575472,0.555727,0,
1,0.965689,0,
0.575472,0.555727,0,
1,0.965689,0,
0.565685,0.565685,0,
1,0.965689,0,
0.565685,0.565685,0,
1,1,0,
0.565685,0.565685,0,
1,1,0,
0.555727,0.575472,0,
1,1,0,
0.555727,0.575472,0,
0.965689,1,0,
0.555727,0.575472,0,
0.965689,1,0,
0.545599,0.585083,0,
0.965689,1,0,
0.545599,0.585083,0,
0.932515,1,0,
0.545599,0.585083,0,
0.932515,1,0,
0.535304,0.594516,0,
0.932515,1,0,
0.535304,0.594516,0,
0.900404,1,0,
0.535304,0.594516,0,
0.900404,1,0,
0.524847,0.603768,0,
0.900404,1,0,
0.524847,0.603768,0,
0.869287,1,0,
0.524847,0.603768,0,
0.869287,1,0,
0.51423,0.612836,0,
0.869287,1,0,
0.51423,0.612836,0,
0.8391,1,0,
0.51423,0.612836,0,
0.8391,1,0,
0.503456,0.621717,0,
0.8391,1,0,
0.503456,0.621717,0,
0.809784,1,0,
0.503456,0.621717,0,
0.809784,1,0,
0.492529,0.630409,0,
0.809784,1,0,
0.492529,0.630409,0,
0.781286,1,0,
0.492529,0.630409,0,
0.781286,1,0,
0.481452,0.638908,0,
0.781286,1,0,
0.481452,0.638908,0,
0.753554,1,0,
0.481452,0.638908,0,
0.753554,1,0,
0.470228,0.647214,0,
0.753554,1,0,
0.470228,0.647214,0,
0.726543,1,0,
0.470228,0.647214,0,
0.726543,1,0,
0.458861,0.655322,0,
0.726543,1,0,
0.458861,0.655322,0,
0.700208,1,0,
0.458861,0.655322,0,
0.700208,1,0,
0.447354,0.66323,0,
0.700208,1,0,
0.447354,0.66323,0,
0.674509,1,0,
0.447354,0.66323,0,
0.674509,1,0,
0.435711,0.670936,0,
0.674509,1,0,
0.435711,0.670936,0,
0.649408,1,0,
0.435711,0.670936,0,
0.649408,1,0,
0.423935,0.678438,0,
0.649408,1,0,
0.423935,0.678438,0,
0.624869,1,0,
0.423935,0.678438,0,
0.624869,1,0,
0.41203,0.685734,0,
0.624869,1,0,
0.41203,0.685734,0,
0.600861,1,0,
0.41203,0.685734,0,
0.600861,1,0,
0.4,0.69282,0,
0.600861,1,0,
0.4,0.69282,0,
0.57735,1,0,
0.4,0.69282,0,
0.57735,1,0,
0.387848,0.699696,0,
0.57735,1,0,
0.387848,0.699696,0,
0.554309,1,0,
0.387848,0.699696,0,
0.554309,1,0,
0.375577,0.706358,0,
0.554309,1,0,
0.375577,0.706358,0,
0.531709,1,0,
0.375577,0.706358,0,
0.531709,1,0,
0.363192,0.712805,0,
0.531709,1,0,
0.363192,0.712805,0,
0.509525,1,0,
0.363192,0.712805,0,
0.509525,1,0,
0.350697,0.719035,0,
0.509525,1,0,
0.350697,0.719035,0,
0.487733,1,0,
0.350697,0.719035,0,
0.487733,1,0,
0.338095,0.725046,0,
0.487733,1,0,
0.338095,0.725046,0,
0.466308,1,0,
0.338095,0.725046,0,
0.466308,1,0,
0.325389,0.730836,0,
0.466308,1,0,
0.325389,0.730836,0,
0.445229,1,0,
0.325389,0.730836,0,
0.445229,1,0,
0.312585,0.736404,0,
0.445229,1,0,
0.312585,0.736404,0,
0.424475,1,0,
0.312585,0.736404,0,
0.424475,1,0,
0.299685,0.741747,0,
0.424475,1,0,
0.299685,0.741747,0,
0.404026,1,0,
0.299685,0.741747,0,
0.404026,1,0,
0.286694,0.746864,0,
0.404026,1,0,
0.286694,0.746864,0,
0.383864,1,0,
0.286694,0.746864,0,
0.383864,1,0,
0.273616,0.751754,0,
0.383864,1,0,
0.273616,0.751754,0,
0.36397,1,0,
0.273616,0.751754,0,
0.36397,1,0,
0.260455,0.756415,0,
0.36397,1,0,
0.260455,0.756415,0,
0.344328,1,0,
0.260455,0.756415,0,
0.344328,1,0,
0.247214,0.760845,0,
0.344328,1,0,
0.247214,0.760845,0,
0.32492,1,0,
0.247214,0.760845,0,
0.32492,1,0,
0.233897,0.765044,0,
0.32492,1,0,
0.233897,0.765044,0,
0.305731,1,0,
0.233897,0.765044,0,
0.305731,1,0,
0.22051,0.769009,0,
0.305731,1,0,
0.22051,0.769009,0,
0.286745,1,0,
0.22051,0.769009,0,
0.286745,1,0,
0.207055,0.772741,0,
0.286745,1,0,
0.207055,0.772741,0,
0.267949,1,0,
0.207055,0.772741,0,
0.267949,1,0,
0.193538,0.776237,0,
0.267949,1,0,
0.193538,0.776237,0,
0.249328,1,0,
0.193538,0.776237,0,
0.249328,1,0,
0.179961,0.779496,0,
0.249328,1,0,
0.179961,0.779496,0,
0.230868,1,0,
0.179961,0.779496,0,
0.230868,1,0,
0.166329,0.782518,0,
0.230868,1,0,
0.166329,0.782518,0,
0.212557,1,0,
0.166329,0.782518,0,
0.212557,1,0,
0.152647,0.785302,0,
0.212557,1,0,
0.152647,0.785302,0,
0.19438,1,0,
0.152647,0.785302,0,
0.19438,1,0,
0.138919,0.787846,0,
0.19438,1,0,
0.138919,0.787846,0,
0.176327,1,0,
0.138919,0.787846,0,
0.176327,1,0,
0.125148,0.790151,0,
0.176327,1,0,
0.125148,0.790151,0,
0.158384,1,0,
0.125148,0.790151,0,
0.158384,1,0,
0.111339,0.792214,0,
0.158384,1,0,
0.111339,0.792214,0,
0.140541,1,0,
0.111339,0.792214,0,
0.140541,1,0,
0.0974955,0.794037,0,
0.140541,1,0,
0.0974955,0.794037,0,
0.122785,1,0,
0.0974955,0.794037,0,
0.122785,1,0,
0.0836228,0.795618,0,
0.122785,1,0,
0.0836228,0.795618,0,
0.105104,1,0,
0.0836228,0.795618,0,
0.105104,1,0,
0.0697246,0.796956,0,
0.105104,1,0,
0.0697246,0.796956,0,
0.0874887,1,0,
0.0697246,0.796956,0,
0.0874887,1,0,
0.0558052,0.798051,0,
0.0874887,1,0,
0.0558052,0.798051,0,
0.0699268,1,0,
0.0558052,0.798051,0,
0.0699268,1,0,
0.0418688,0.798904,0,
0.0699268,1,0,
0.0418688,0.798904,0,
0.0524078,1,0,
0.0418688,0.798904,0,
0.0524078,1,0,
0.0279196,0.799513,0,
0.0524078,1,0,
0.0279196,0.799513,0,
0.0349208,1,0,
0.0279196,0.799513,0,
0.0349208,1,0,
0.0139619,0.799878,0,
0.0349208,1,0,
0.0139619,0.799878,0,
0.0174551,1,0,
0.0139619,0.799878,0,
0.0174551,1,0,
2.14359e-08,0.8,0,
0.0174551,1,0,
2.14359e-08,0.8,0,
2.67949e-08,1,0,
2.14359e-08,0.8,0,
2.67949e-08,1,0,
-0.0139619,0.799878,0,
2.67949e-08,1,0,
-0.0139619,0.799878,0,
-0.017455,1,0,
-0.0139619,0.799878,0,
-0.017455,1,0,
-0.0279196,0.799513,0,
-0.017455,1,0,
-0.0279196,0.799513,0,
-0.0349207,1,0,
-0.0279196,0.799513,0,
-0.0349207,1,0,
-0.0418687,0.798904,0,
-0.0349207,1,0,
-0.0418687,0.798904,0,
-0.0524078,1,0,
-0.0418687,0.798904,0,
-0.0524078,1,0,
-0.0558052,0.798051,0,
-0.0524078,1,0,
-0.0558052,0.798051,0,
-0.0699268,1,0,
-0.0558052,0.798051,0,
-0.0699268,1,0,
-0.0697246,0.796956,0,
-0.0699268,1,0,
-0.0697246,0.796956,0,
-0.0874886,1,0,
-0.0697246,0.796956,0,
-0.0874886,1,0,
-0.0836227,0.795618,0,
-0.0874886,1,0,
-0.0836227,0.795618,0,
-0.105104,1,0,
-0.0836227,0.795618,0,
-0.105104,1,0,
-0.0974955,0.794037,0,
-0.105104,1,0,
-0.0974955,0.794037,0,
-0.122785,1,0,
-0.0974955,0.794037,0,
-0.122785,1,0,
-0.111338,0.792214,0,
-0.122785,1,0,
-0.111338,0.792214,0,
-0.140541,1,0,
-0.111338,0.792214,0,
-0.140541,1,0,
-0.125148,0.790151,0,
-0.140541,1,0,
-0.125148,0.790151,0,
-0.158384,1,0,
-0.125148,0.790151,0,
-0.158384,1,0,
-0.138919,0.787846,0,
-0.158384,1,0,
-0.138919,0.787846,0,
-0.176327,1,0,
-0.138919,0.787846,0,
-0.176327,1,0,
-0.152647,0.785302,0,
-0.176327,1,0,
-0.152647,0.785302,0,
-0.19438,1,0,
-0.152647,0.785302,0,
-0.19438,1,0,
-0.166329,0.782518,0,
-0.19438,1,0,
-0.166329,0.782518,0,
-0.212557,1,0,
-0.166329,0.782518,0,
-0.212557,1,0,
-0.179961,0.779496,0,
-0.212557,1,0,
-0.179961,0.779496,0,
-0.230868,1,0,
-0.179961,0.779496,0,
-0.230868,1,0,
-0.193537,0.776237,0,
-0.230868,1,0,
-0.193537,0.776237,0,
-0.249328,1,0,
-0.193537,0.776237,0,
-0.249328,1,0,
-0.207055,0.772741,0,
-0.249328,1,0,
-0.207055,0.772741,0,
-0.267949,1,0,
-0.207055,0.772741,0,
-0.267949,1,0,
-0.22051,0.769009,0,
-0.267949,1,0,
-0.22051,0.769009,0,
-0.286745,1,0,
-0.22051,0.769009,0,
-0.286745,1,0,
-0.233897,0.765044,0,
-0.286745,1,0,
-0.233897,0.765044,0,
-0.305731,1,0,
-0.233897,0.765044,0,
-0.305731,1,0,
-0.247214,0.760845,0,
-0.305731,1,0,
-0.247214,0.760845,0,
-0.32492,1,0,
-0.247214,0.760845,0,
-0.32492,1,0,
-0.260454,0.756415,0,
-0.32492,1,0,
-0.260454,0.756415,0,
-0.344328,1,0,
-0.260454,0.756415,0,
-0.344328,1,0,
-0.273616,0.751754,0,
-0.344328,1,0,
-0.273616,0.751754,0,
-0.36397,1,0,
-0.273616,0.751754,0,
-0.36397,1,0,
-0.286694,0.746864,0,
-0.36397,1,0,
-0.286694,0.746864,0,
-0.383864,1,0,
-0.286694,0.746864,0,
-0.383864,1,0,
-0.299685,0.741747,0,
-0.383864,1,0,
-0.299685,0.741747,0,
-0.404026,1,0,
-0.299685,0.741747,0,
-0.404026,1,0,
-0.312585,0.736404,0,
-0.404026,1,0,
-0.312585,0.736404,0,
-0.424475,1,0,
-0.312585,0.736404,0,
-0.424475,1,0,
-0.325389,0.730836,0,
-0.424475,1,0,
-0.325389,0.730836,0,
-0.445229,1,0,
-0.325389,0.730836,0,
-0.445229,1,0,
-0.338095,0.725046,0,
-0.445229,1,0,
-0.338095,0.725046,0,
-0.466308,1,0,
-0.338095,0.725046,0,
-0.466308,1,0,
-0.350697,0.719035,0,
-0.466308,1,0,
-0.350697,0.719035,0,
-0.487733,1,0,
-0.350697,0.719035,0,
-0.487733,1,0,
-0.363192,0.712805,0,
-0.487733,1,0,
-0.363192,0.712805,0,
-0.509525,1,0,
-0.363192,0.712805,0,
-0.509525,1,0,
-0.375577,0.706358,0,
-0.509525,1,0,
-0.375577,0.706358,0,
-0.531709,1,0,
-0.375577,0.706358,0,
-0.531709,1,0,
-0.387848,0.699696,0,
-0.531709,1,0,
-0.387848,0.699696,0,
-0.554309,1,0,
-0.387848,0.699696,0,
-0.554309,1,0,
-0.4,0.69282,0,
-0.554309,1,0,
-0.4,0.69282,0,
-0.57735,1,0,
-0.4,0.69282,0,
-0.57735,1,0,
-0.41203,0.685734,0,
-0.57735,1,0,
-0.41203,0.685734,0,
-0.600861,1,0,
-0.41203,0.685734,0,
-0.600861,1,0,
-0.423935,0.678438,0,
-0.600861,1,0,
-0.423935,0.678438,0,
-0.624869,1,0,
-0.423935,0.678438,0,
-0.624869,1,0,
-0.435711,0.670936,0,
-0.624869,1,0,
-0.435711,0.670936,0,
-0.649408,1,0,
-0.435711,0.670936,0,
-0.649408,1,0,
-0.447354,0.66323,0,
-0.649408,1,0,
-0.447354,0.66323,0,
-0.674508,1,0,
-0.447354,0.66323,0,
-0.674508,1,0,
-0.458861,0.655322,0,
-0.674508,1,0,
-0.458861,0.655322,0,
-0.700207,1,0,
-0.458861,0.655322,0,
-0.700207,1,0,
-0.470228,0.647214,0,
-0.700207,1,0,
-0.470228,0.647214,0,
-0.726542,1,0,
-0.470228,0.647214,0,
-0.726542,1,0,
-0.481452,0.638908,0,
-0.726542,1,0,
-0.481452,0.638908,0,
-0.753554,1,0,
-0.481452,0.638908,0,
-0.753554,1,0,
-0.492529,0.630409,0,
-0.753554,1,0,
-0.492529,0.630409,0,
-0.781286,1,0,
-0.492529,0.630409,0,
-0.781286,1,0,
-0.503456,0.621717,0,
-0.781286,1,0,
-0.503456,0.621717,0,
-0.809784,1,0,
-0.503456,0.621717,0,
-0.809784,1,0,
-0.51423,0.612836,0,
-0.809784,1,0,
-0.51423,0.612836,0,
-0.8391,1,0,
-0.51423,0.612836,0,
-0.8391,1,0,
-0.524847,0.603768,0,
-0.8391,1,0,
-0.524847,0.603768,0,
-0.869287,1,0,
-0.524847,0.603768,0,
-0.869287,1,0,
-0.535304,0.594516,0,
-0.869287,1,0,
-0.535304,0.594516,0,
-0.900404,1,0,
-0.535304,0.594516,0,
-0.900404,1,0,
-0.545599,0.585083,0,
-0.900404,1,0,
-0.545599,0.585083,0,
-0.932515,1,0,
-0.545599,0.585083,0,
-0.932515,1,0,
-0.555727,0.575472,0,
-0.932515,1,0,
-0.555727,0.575472,0,
-0.965689,1,0,
-0.555727,0.575472,0,
-0.965689,1,0,
-0.565685,0.565685,0,
-0.965689,1,0,
-0.565685,0.565685,0,
-1,1,0,
-0.565685,0.565685,0,
-1,1,0,
-0.575472,0.555727,0,
-1,1,0,
-0.575472,0.555727,0,
-1,0.965689,0,
-0.575472,0.555727,0,
-1,0.965689,0,
-0.585083,0.545599,0,
-1,0.965689,0,
-0.585083,0.545599,0,
-1,0.932515,0,
-0.585083,0.545599,0,
-1,0.932515,0,
-0.594516,0.535305,0,
-1,0.932515,0,
-0.594516,0.535305,0,
-1,0.900404,0,
-0.594516,0.535305,0,
-1,0.900404,0,
-0.603768,0.524847,0,
-1,0.900404,0,
-0.603768,0.524847,0,
-1,0.869287,0,
-0.603768,0.524847,0,
-1,0.869287,0,
-0.612836,0.51423,0,
-1,0.869287,0,
-0.612836,0.51423,0,
-1,0.8391,0,
-0.612836,0.51423,0,
-1,0.8391,0,
-0.621717,0.503456,0,
-1,0.8391,0,
-0.621717,0.503456,0,
-1,0.809784,0,
-0.621717,0.503456,0,
-1,0.809784,0,
-0.630409,0.492529,0,
-1,0.809784,0,
-0.630409,0.492529,0,
-1,0.781286,0,
-0.630409,0.492529,0,
-1,0.781286,0,
-0.638908,0.481452,0,
-1,0.781286,0,
-0.638908,0.481452,0,
-1,0.753554,0,
-0.638908,0.481452,0,
-1,0.753554,0,
-0.647214,0.470228,0,
-1,0.753554,0,
-0.647214,0.470228,0,
-1,0.726543,0,
-0.647214,0.470228,0,
-1,0.726543,0,
-0.655322,0.458861,0,
-1,0.726543,0,
-0.655322,0.458861,0,
-1,0.700208,0,
-0.655322,0.458861,0,
-1,0.700208,0,
-0.66323,0.447354,0,
-1,0.700208,0,
-0.66323,0.447354,0,
-1,0.674509,0,
-0.66323,0.447354,0,
-1,0.674509,0,
-0.670936,0.435711,0,
-1,0.674509,0,
-0.670936,0.435711,0,
-1,0.649408,0,
-0.670936,0.435711,0,
-1,0.649408,0,
-0.678438,0.423935,0,
-1,0.649408,0,
-0.678438,0.423935,0,
-1,0.624869,0,
-0.678438,0.423935,0,
-1,0.624869,0,
-0.685734,0.41203,0,
-1,0.624869,0,
-0.685734,0.41203,0,
-1,0.600861,0,
-0.685734,0.41203,0,
-1,0.600861,0,
-0.69282,0.4,0,
-1,0.600861,0,
-0.69282,0.4,0,
-1,0.57735,0,
-0.69282,0.4,0,
-1,0.57735,0,
-0.699696,0.387848,0,
-1,0.57735,0,
-0.699696,0.387848,0,
-1,0.554309,0,
-0.699696,0.387848,0,
-1,0.554309,0,
-0.706358,0.375577,0,
-1,0.554309,0,
-0.706358,0.375577,0,
-1,0.531709,0,
-0.706358,0.375577,0,
-1,0.531709,0,
-0.712805,0.363192,0,
-1,0.531709,0,
-0.712805,0.363192,0,
-1,0.509526,0,
-0.712805,0.363192,0,
-1,0.509526,0,
-0.719035,0.350697,0,
-1,0.509526,0,
-0.719035,0.350697,0,
-1,0.487733,0,
-0.719035,0.350697,0,
-1,0.487733,0,
-0.725046,0.338095,0,
-1,0.487733,0,
-0.725046,0.338095,0,
-1,0.466308,0,
-0.725046,0.338095,0,
-1,0.466308,0,
-0.730836,0.325389,0,
-1,0.466308,0,
-0.730836,0.325389,0,
-1,0.445229,0,
-0.730836,0.325389,0,
-1,0.445229,0,
-0.736404,0.312585,0,
-1,0.445229,0,
-0.736404,0.312585,0,
-1,0.424475,0,
-0.736404,0.312585,0,
-1,0.424475,0,
-0.741747,0.299685,0,
-1,0.424475,0,
-0.741747,0.299685,0,
-1,0.404026,0,
-0.741747,0.299685,0,
-1,0.404026,0,
-0.746864,0.286694,0,
-1,0.404026,0,
-0.746864,0.286694,0,
-1,0.383864,0,
-0.746864,0.286694,0,
-1,0.383864,0,
-0.751754,0.273616,0,
-1,0.383864,0,
-0.751754,0.273616,0,
-1,0.36397,0,
-0.751754,0.273616,0,
-1,0.36397,0,
-0.756415,0.260455,0,
-1,0.36397,0,
-0.756415,0.260455,0,
-1,0.344328,0,
-0.756415,0.260455,0,
-1,0.344328,0,
-0.760845,0.247214,0,
-1,0.344328,0,
-0.760845,0.247214,0,
-1,0.32492,0,
-0.760845,0.247214,0,
-1,0.32492,0,
-0.765044,0.233897,0,
-1,0.32492,0,
-0.765044,0.233897,0,
-1,0.305731,0,
-0.765044,0.233897,0,
-1,0.305731,0,
-0.769009,0.22051,0,
-1,0.305731,0,
-0.769009,0.22051,0,
-1,0.286745,0,
-0.769009,0.22051,0,
-1,0.286745,0,
-0.772741,0.207055,0,
-1,0.286745,0,
-0.772741,0.207055,0,
-1,0.267949,0,
-0.772741,0.207055,0,
-1,0.267949,0,
-0.776237,0.193538,0,
-1,0.267949,0,
-0.776237,0.193538,0,
-1,0.249328,0,
-0.776237,0.193538,0,
-1,0.249328,0,
-0.779496,0.179961,0,
-1,0.249328,0,
-0.779496,0.179961,0,
-1,0.230868,0,
-0.779496,0.179961,0,
-1,0.230868,0,
-0.782518,0.166329,0,
-1,0.230868,0,
-0.782518,0.166329,0,
-1,0.212557,0,
-0.782518,0.166329,0,
-1,0.212557,0,
-0.785302,0.152647,0,
-1,0.212557,0,
-0.785302,0.152647,0,
-1,0.19438,0,
-0.785302,0.152647,0,
-1,0.19438,0,
-0.787846,0.138919,0,
-1,0.19438,0,
-0.787846,0.138919,0,
-1,0.176327,0,
-0.787846,0.138919,0,
-1,0.176327,0,
-0.790151,0.125148,0,
-1,0.176327,0,
-0.790151,0.125148,0,
-1,0.158384,0,
-0.790151,0.125148,0,
-1,0.158384,0,
-0.792214,0.111339,0,
-1,0.158384,0,
-0.792214,0.111339,0,
-1,0.140541,0,
-0.792214,0.111339,0,
-1,0.140541,0,
-0.794037,0.0974955,0,
-1,0.140541,0,
-0.794037,0.0974955,0,
-1,0.122785,0,
-0.794037,0.0974955,0,
-1,0.122785,0,
-0.795618,0.0836228,0,
-1,0.122785,0,
-0.795618,0.0836228,0,
-1,0.105104,0,
-0.795618,0.0836228,0,
-1,0.105104,0,
-0.796956,0.0697246,0,
-1,0.105104,0,
-0.796956,0.0697246,0,
-1,0.0874887,0,
-0.796956,0.0697246,0,
-1,0.0874887,0,
-0.798051,0.0558052,0,
-1,0.0874887,0,
-0.798051,0.0558052,0,
-1,0.0699269,0,
-0.798051,0.0558052,0,
-1,0.0699269,0,
-0.798904,0.0418688,0,
-1,0.0699269,0,
-0.798904,0.0418688,0,
-1,0.0524078,0,
-0.798904,0.0418688,0,
-1,0.0524078,0,
-0.799513,0.0279196,0,
-1,0.0524078,0,
-0.799513,0.0279196,0,
-1,0.0349208,0,
-0.799513,0.0279196,0,
-1,0.0349208,0,
-0.799878,0.013962,0,
-1,0.0349208,0,
-0.799878,0.013962,0,
-1,0.0174551,0,
-0.799878,0.013962,0,
-1,0.0174551,0,
-0.8,4.28718e-08,0,
-1,0.0174551,0,
-0.8,4.28718e-08,0,
-1,5.35898e-08,0,
-0.8,4.28718e-08,0,
-1,5.35898e-08,0,
-0.799878,-0.0139619,0,
-1,5.35898e-08,0,
-0.799878,-0.0139619,0,
-1,-0.017455,0,
-0.799878,-0.0139619,0,
-1,-0.017455,0,
-0.799513,-0.0279196,0,
-1,-0.017455,0,
-0.799513,-0.0279196,0,
-1,-0.0349207,0,
-0.799513,-0.0279196,0,
-1,-0.0349207,0,
-0.798904,-0.0418687,0,
-1,-0.0349207,0,
-0.798904,-0.0418687,0,
-1,-0.0524077,0,
-0.798904,-0.0418687,0,
-1,-0.0524077,0,
-0.798051,-0.0558051,0,
-1,-0.0524077,0,
-0.798051,-0.0558051,0,
-1,-0.0699268,0,
-0.798051,-0.0558051,0,
-1,-0.0699268,0,
-0.796956,-0.0697246,0,
-1,-0.0699268,0,
-0.796956,-0.0697246,0,
-1,-0.0874886,0,
-0.796956,-0.0697246,0,
-1,-0.0874886,0,
-0.795618,-0.0836227,0,
-1,-0.0874886,0,
-0.795618,-0.0836227,0,
-1,-0.105104,0,
-0.795618,-0.0836227,0,
-1,-0.105104,0,
-0.794037,-0.0974954,0,
-1,-0.105104,0,
-0.794037,-0.0974954,0,
-1,-0.122785,0,
-0.794037,-0.0974954,0,
-1,-0.122785,0,
-0.792214,-0.111338,0,
-1,-0.122785,0,
-0.792214,-0.111338,0,
-1,-0.140541,0,
-0.792214,-0.111338,0,
-1,-0.140541,0,
-0.790151,-0.125148,0,
-1,-0.140541,0,
-0.790151,-0.125148,0,
-1,-0.158384,0,
-0.790151,-0.125148,0,
-1,-0.158384,0,
-0.787846,-0.138918,0,
-1,-0.158384,0,
-0.787846,-0.138918,0,
-1,-0.176327,0,
-0.787846,-0.138918,0,
-1,-0.176327,0,
-0.785302,-0.152647,0,
-1,-0.176327,0,
-0.785302,-0.152647,0,
-1,-0.19438,0,
-0.785302,-0.152647,0,
-1,-0.19438,0,
-0.782518,-0.166329,0,
-1,-0.19438,0,
-0.782518,-0.166329,0,
-1,-0.212557,0,
-0.782518,-0.166329,0,
-1,-0.212557,0,
-0.779496,-0.179961,0,
-1,-0.212557,0,
-0.779496,-0.179961,0,
-1,-0.230868,0,
-0.779496,-0.179961,0,
-1,-0.230868,0,
-0.776237,-0.193537,0,
-1,-0.230868,0,
-0.776237,-0.193537,0,
-1,-0.249328,0,
-0.776237,-0.193537,0,
-1,-0.249328,0,
-0.772741,-0.207055,0,
-1,-0.249328,0,
-0.772741,-0.207055,0,
-1,-0.267949,0,
-0.772741,-0.207055,0,
-1,-0.267949,0,
-0.769009,-0.22051,0,
-1,-0.267949,0,
-0.769009,-0.22051,0,
-1,-0.286745,0,
-0.769009,-0.22051,0,
-1,-0.286745,0,
-0.765044,-0.233897,0,
-1,-0.286745,0,
-0.765044,-0.233897,0,
-1,-0.305731,0,
-0.765044,-0.233897,0,
-1,-0.305731,0,
-0.760845,-0.247214,0,
-1,-0.305731,0,
-0.760845,-0.247214,0,
-1,-0.32492,0,
-0.760845,-0.247214,0,
-1,-0.32492,0,
-0.756415,-0.260454,0,
-1,-0.32492,0,
-0.756415,-0.260454,0,
-1,-0.344328,0,
-0.756415,-0.260454,0,
-1,-0.344328,0,
-0.751754,-0.273616,0,
-1,-0.344328,0,
-0.751754,-0.273616,0,
-1,-0.36397,0,
-0.751754,-0.273616,0,
-1,-0.36397,0,
-0.746864,-0.286694,0,
-1,-0.36397,0,
-0.746864,-0.286694,0,
-1,-0.383864,0,
-0.746864,-0.286694,0,
-1,-0.383864,0,
-0.741747,-0.299685,0,
-1,-0.383864,0,
-0.741747,-0.299685,0,
-1,-0.404026,0,
-0.741747,-0.299685,0,
-1,-0.404026,0,
-0.736404,-0.312585,0,
-1,-0.404026,0,
-0.736404,-0.312585,0,
-1,-0.424475,0,
-0.736404,-0.312585,0,
-1,-0.424475,0,
-0.730836,-0.325389,0,
-1,-0.424475,0,
-0.730836,-0.325389,0,
-1,-0.445229,0,
-0.730836,-0.325389,0,
-1,-0.445229,0,
-0.725046,-0.338095,0,
-1,-0.445229,0,
-0.725046,-0.338095,0,
-1,-0.466308,0,
-0.725046,-0.338095,0,
-1,-0.466308,0,
-0.719035,-0.350697,0,
-1,-0.466308,0,
-0.719035,-0.350697,0,
-1,-0.487733,0,
-0.719035,-0.350697,0,
-1,-0.487733,0,
-0.712805,-0.363192,0,
-1,-0.487733,0,
-0.712805,-0.363192,0,
-1,-0.509525,0,
-0.712805,-0.363192,0,
-1,-0.509525,0,
-0.706358,-0.375577,0,
-1,-0.509525,0,
-0.706358,-0.375577,0,
-1,-0.531709,0,
-0.706358,-0.375577,0,
-1,-0.531709,0,
-0.699696,-0.387848,0,
-1,-0.531709,0,
-0.699696,-0.387848,0,
-1,-0.554309,0,
-0.699696,-0.387848,0,
-1,-0.554309,0,
-0.69282,-0.4,0,
-1,-0.554309,0,
-0.69282,-0.4,0,
-1,-0.57735,0,
-0.69282,-0.4,0,
-1,-0.57735,0,
-0.685734,-0.41203,0,
-1,-0.57735,0,
-0.685734,-0.41203,0,
-1,-0.600861,0,
-0.685734,-0.41203,0,
-1,-0.600861,0,
-0.678439,-0.423935,0,
-1,-0.600861,0,
-0.678439,-0.423935,0,
-1,-0.624869,0,
-0.678439,-0.423935,0,
-1,-0.624869,0,
-0.670936,-0.435711,0,
-1,-0.624869,0,
-0.670936,-0.435711,0,
-1,-0.649408,0,
-0.670936,-0.435711,0,
-1,-0.649408,0,
-0.66323,-0.447354,0,
-1,-0.649408,0,
-0.66323,-0.447354,0,
-1,-0.674508,0,
-0.66323,-0.447354,0,
-1,-0.674508,0,
-0.655322,-0.458861,0,
-1,-0.674508,0,
-0.655322,-0.458861,0,
-1,-0.700207,0,
-0.655322,-0.458861,0,
-1,-0.700207,0,
-0.647214,-0.470228,0,
-1,-0.700207,0,
-0.647214,-0.470228,0,
-1,-0.726542,0,
-0.647214,-0.470228,0,
-1,-0.726542,0,
-0.638908,-0.481452,0,
-1,-0.726542,0,
-0.638908,-0.481452,0,
-1,-0.753554,0,
-0.638908,-0.481452,0,
-1,-0.753554,0,
-0.630409,-0.492529,0,
-1,-0.753554,0,
-0.630409,-0.492529,0,
-1,-0.781286,0,
-0.630409,-0.492529,0,
-1,-0.781286,0,
-0.621717,-0.503456,0,
-1,-0.781286,0,
-0.621717,-0.503456,0,
-1,-0.809784,0,
-0.621717,-0.503456,0,
-1,-0.809784,0,
-0.612836,-0.51423,0,
-1,-0.809784,0,
-0.612836,-0.51423,0,
-1,-0.8391,0,
-0.612836,-0.51423,0,
-1,-0.8391,0,
-0.603768,-0.524847,0,
-1,-0.8391,0,
-0.603768,-0.524847,0,
-1,-0.869287,0,
-0.603768,-0.524847,0,
-1,-0.869287,0,
-0.594516,-0.535304,0,
-1,-0.869287,0,
-0.594516,-0.535304,0,
-1,-0.900404,0,
-0.594516,-0.535304,0,
-1,-0.900404,0,
-0.585083,-0.545599,0,
-1,-0.900404,0,
-0.585083,-0.545599,0,
-1,-0.932515,0,
-0.585083,-0.545599,0,
-1,-0.932515,0,
-0.575472,-0.555727,0,
-1,-0.932515,0,
-0.575472,-0.555727,0,
-1,-0.965689,0,
-0.575472,-0.555727,0,
-1,-0.965689,0,
-0.565685,-0.565685,0,
-1,-0.965689,0,
-0.565685,-0.565685,0,
-1,-1,0,
-0.565685,-0.565685,0,
-1,-1,0,
-0.555727,-0.575472,0,
-1,-1,0,
-0.555727,-0.575472,0,
-0.965689,-1,0,
-0.555727,-0.575472,0,
-0.965689,-1,0,
-0.545599,-0.585083,0,
-0.965689,-1,0,
-0.545599,-0.585083,0,
-0.932515,-1,0,
-0.545599,-0.585083,0,
-0.932515,-1,0,
-0.535305,-0.594516,0,
-0.932515,-1,0,
-0.535305,-0.594516,0,
-0.900404,-1,0,
-0.535305,-0.594516,0,
-0.900404,-1,0,
-0.524847,-0.603768,0,
-0.900404,-1,0,
-0.524847,-0.603768,0,
-0.869287,-1,0,
-0.524847,-0.603768,0,
-0.869287,-1,0,
-0.51423,-0.612836,0,
-0.869287,-1,0,
-0.51423,-0.612836,0,
-0.8391,-1,0,
-0.51423,-0.612836,0,
-0.8391,-1,0,
-0.503456,-0.621717,0,
-0.8391,-1,0,
-0.503456,-0.621717,0,
-0.809784,-1,0,
-0.503456,-0.621717,0,
-0.809784,-1,0,
-0.492529,-0.630409,0,
-0.809784,-1,0,
-0.492529,-0.630409,0,
-0.781286,-1,0,
-0.492529,-0.630409,0,
-0.781286,-1,0,
-0.481452,-0.638908,0,
-0.781286,-1,0,
-0.481452,-0.638908,0,
-0.753554,-1,0,
-0.481452,-0.638908,0,
-0.753554,-1,0,
-0.470228,-0.647214,0,
-0.753554,-1,0,
-0.470228,-0.647214,0,
-0.726543,-1,0,
-0.470228,-0.647214,0,
-0.726543,-1,0,
-0.458861,-0.655322,0,
-0.726543,-1,0,
-0.458861,-0.655322,0,
-0.700208,-1,0,
-0.458861,-0.655322,0,
-0.700208,-1,0,
-0.447354,-0.66323,0,
-0.700208,-1,0,
-0.447354,-0.66323,0,
-0.674509,-1,0,
-0.447354,-0.66323,0,
-0.674509,-1,0,
-0.435711,-0.670936,0,
-0.674509,-1,0,
-0.435711,-0.670936,0,
-0.649408,-1,0,
-0.435711,-0.670936,0,
-0.649408,-1,0,
-0.423935,-0.678438,0,
-0.649408,-1,0,
-0.423935,-0.678438,0,
-0.624869,-1,0,
-0.423935,-0.678438,0,
-0.624869,-1,0,
-0.412031,-0.685734,0,
-0.624869,-1,0,
-0.412031,-0.685734,0,
-0.600861,-1,0,
-0.412031,-0.685734,0,
-0.600861,-1,0,
-0.4,-0.69282,0,
-0.600861,-1,0,
-0.4,-0.69282,0,
-0.57735,-1,0,
-0.4,-0.69282,0,
-0.57735,-1,0,
-0.387848,-0.699696,0,
-0.57735,-1,0,
-0.387848,-0.699696,0,
-0.554309,-1,0,
-0.387848,-0.699696,0,
-0.554309,-1,0,
-0.375577,-0.706358,0,
-0.554309,-1,0,
-0.375577,-0.706358,0,
-0.53171,-1,0,
-0.375577,-0.706358,0,
-0.53171,-1,0,
-0.363192,-0.712805,0,
-0.53171,-1,0,
-0.363192,-0.712805,0,
-0.509526,-1,0,
-0.363192,-0.712805,0,
-0.509526,-1,0,
-0.350697,-0.719035,0,
-0.509526,-1,0,
-0.350697,-0.719035,0,
-0.487733,-1,0,
-0.350697,-0.719035,0,
-0.487733,-1,0,
-0.338095,-0.725046,0,
-0.487733,-1,0,
-0.338095,-0.725046,0,
-0.466308,-1,0,
-0.338095,-0.725046,0,
-0.466308,-1,0,
-0.325389,-0.730836,0,
-0.466308,-1,0,
-0.325389,-0.730836,0,
-0.445229,-1,0,
-0.325389,-0.730836,0,
-0.445229,-1,0,
-0.312585,-0.736404,0,
-0.445229,-1,0,
-0.312585,-0.736404,0,
-0.424475,-1,0,
-0.312585,-0.736404,0,
-0.424475,-1,0,
-0.299685,-0.741747,0,
-0.424475,-1,0,
-0.299685,-0.741747,0,
-0.404026,-1,0,
-0.299685,-0.741747,0,
-0.404026,-1,0,
-0.286694,-0.746864,0,
-0.404026,-1,0,
-0.286694,-0.746864,0,
-0.383864,-1,0,
-0.286694,-0.746864,0,
-0.383864,-1,0,
-0.273616,-0.751754,0,
-0.383864,-1,0,
-0.273616,-0.751754,0,
-0.36397,-1,0,
-0.273616,-0.751754,0,
-0.36397,-1,0,
-0.260455,-0.756415,0,
-0.36397,-1,0,
-0.260455,-0.756415,0,
-0.344328,-1,0,
-0.260455,-0.756415,0,
-0.344328,-1,0,
-0.247214,-0.760845,0,
-0.344328,-1,0,
-0.247214,-0.760845,0,
-0.32492,-1,0,
-0.247214,-0.760845,0,
-0.32492,-1,0,
-0.233897,-0.765044,0,
-0.32492,-1,0,
-0.233897,-0.765044,0,
-0.305731,-1,0,
-0.233897,-0.765044,0,
-0.305731,-1,0,
-0.22051,-0.769009,0,
-0.305731,-1,0,
-0.22051,-0.769009,0,
-0.286745,-1,0,
-0.22051,-0.769009,0,
-0.286745,-1,0,
-0.207055,-0.772741,0,
-0.286745,-1,0,
-0.207055,-0.772741,0,
-0.267949,-1,0,
-0.207055,-0.772741,0,
-0.267949,-1,0,
-0.193538,-0.776237,0,
-0.267949,-1,0,
-0.193538,-0.776237,0,
-0.249328,-1,0,
-0.193538,-0.776237,0,
-0.249328,-1,0,
-0.179961,-0.779496,0,
-0.249328,-1,0,
-0.179961,-0.779496,0,
-0.230868,-1,0,
-0.179961,-0.779496,0,
-0.230868,-1,0,
-0.166329,-0.782518,0,
-0.230868,-1,0,
-0.166329,-0.782518,0,
-0.212557,-1,0,
-0.166329,-0.782518,0,
-0.212557,-1,0,
-0.152647,-0.785302,0,
-0.212557,-1,0,
-0.152647,-0.785302,0,
-0.19438,-1,0,
-0.152647,-0.785302,0,
-0.19438,-1,0,
-0.138919,-0.787846,0,
-0.19438,-1,0,
-0.138919,-0.787846,0,
-0.176327,-1,0,
-0.138919,-0.787846,0,
-0.176327,-1,0,
-0.125148,-0.790151,0,
-0.176327,-1,0,
-0.125148,-0.790151,0,
-0.158385,-1,0,
-0.125148,-0.790151,0,
-0.158385,-1,0,
-0.111339,-0.792214,0,
-0.158385,-1,0,
-0.111339,-0.792214,0,
-0.140541,-1,0,
-0.111339,-0.792214,0,
-0.140541,-1,0,
-0.0974955,-0.794037,0,
-0.140541,-1,0,
-0.0974955,-0.794037,0,
-0.122785,-1,0,
-0.0974955,-0.794037,0,
-0.122785,-1,0,
-0.0836228,-0.795618,0,
-0.122785,-1,0,
-0.0836228,-0.795618,0,
-0.105104,-1,0,
-0.0836228,-0.795618,0,
-0.105104,-1,0,
-0.0697247,-0.796956,0,
-0.105104,-1,0,
-0.0697247,-0.796956,0,
-0.0874887,-1,0,
-0.0697247,-0.796956,0,
-0.0874887,-1,0,
-0.0558052,-0.798051,0,
-0.0874887,-1,0,
-0.0558052,-0.798051,0,
-0.0699269,-1,0,
-0.0558052,-0.798051,0,
-0.0699269,-1,0,
-0.0418688,-0.798904,0,
-0.0699269,-1,0,
-0.0418688,-0.798904,0,
-0.0524079,-1,0,
-0.0418688,-0.798904,0,
-0.0524079,-1,0,
-0.0279197,-0.799513,0,
-0.0524079,-1,0,
-0.0279197,-0.799513,0,
-0.0349208,-1,0,
-0.0279197,-0.799513,0,
-0.0349208,-1,0,
-0.013962,-0.799878,0,
-0.0349208,-1,0,
-0.013962,-0.799878,0,
-0.0174551,-1,0,
-0.013962,-0.799878,0,
-0.0174551,-1,0,
-6.43078e-08,-0.8,0,
-0.0174551,-1,0,
-6.43078e-08,-0.8,0,
-8.03847e-08,-1,0,
-6.43078e-08,-0.8,0,
-8.03847e-08,-1,0,
0.0139619,-0.799878,0,
-8.03847e-08,-1,0,
0.0139619,-0.799878,0,
0.017455,-1,0,
0.0139619,-0.799878,0,
0.017455,-1,0,
0.0279195,-0.799513,0,
0.017455,-1,0,
0.0279195,-0.799513,0,
0.0349207,-1,0,
0.0279195,-0.799513,0,
0.0349207,-1,0,
0.0418687,-0.798904,0,
0.0349207,-1,0,
0.0418687,-0.798904,0,
0.0524077,-1,0,
0.0418687,-0.798904,0,
0.0524077,-1,0,
0.0558051,-0.798051,0,
0.0524077,-1,0,
0.0558051,-0.798051,0,
0.0699267,-1,0,
0.0558051,-0.798051,0,
0.0699267,-1,0,
0.0697245,-0.796956,0,
0.0699267,-1,0,
0.0697245,-0.796956,0,
0.0874886,-1,0,
0.0697245,-0.796956,0,
0.0874886,-1,0,
0.0836227,-0.795618,0,
0.0874886,-1,0,
0.0836227,-0.795618,0,
0.105104,-1,0,
0.0836227,-0.795618,0,
0.105104,-1,0,
0.0974954,-0.794037,0,
0.105104,-1,0,
0.0974954,-0.794037,0,
0.122784,-1,0,
0.0974954,-0.794037,0,
0.122784,-1,0,
0.111338,-0.792214,0,
0.122784,-1,0,
0.111338,-0.792214,0,
0.140541,-1,0,
0.111338,-0.792214,0,
0.140541,-1,0,
0.125148,-0.790151,0,
0.140541,-1,0,
0.125148,-0.790151,0,
0.158384,-1,0,
0.125148,-0.790151,0,
0.158384,-1,0,
0.138918,-0.787846,0,
0.158384,-1,0,
0.138918,-0.787846,0,
0.176327,-1,0,
0.138918,-0.787846,0,
0.176327,-1,0,
0.152647,-0.785302,0,
0.176327,-1,0,
0.152647,-0.785302,0,
0.19438,-1,0,
0.152647,-0.785302,0,
0.19438,-1,0,
0.166329,-0.782518,0,
0.19438,-1,0,
0.166329,-0.782518,0,
0.212556,-1,0,
0.166329,-0.782518,0,
0.212556,-1,0,
0.179961,-0.779496,0,
0.212556,-1,0,
0.179961,-0.779496,0,
0.230868,-1,0,
0.179961,-0.779496,0,
0.230868,-1,0,
0.193537,-0.776237,0,
0.230868,-1,0,
0.193537,-0.776237,0,
0.249328,-1,0,
0.193537,-0.776237,0,
0.249328,-1,0,
0.207055,-0.772741,0,
0.249328,-1,0,
0.207055,-0.772741,0,
0.267949,-1,0,
0.207055,-0.772741,0,
0.267949,-1,0,
0.22051,-0.769009,0,
0.267949,-1,0,
0.22051,-0.769009,0,
0.286745,-1,0,
0.22051,-0.769009,0,
0.286745,-1,0,
0.233897,-0.765044,0,
0.286745,-1,0,
0.233897,-0.765044,0,
0.305731,-1,0,
0.233897,-0.765044,0,
0.305731,-1,0,
0.247214,-0.760845,0,
0.305731,-1,0,
0.247214,-0.760845,0,
0.32492,-1,0,
0.247214,-0.760845,0,
0.32492,-1,0,
0.260454,-0.756415,0,
0.32492,-1,0,
0.260454,-0.756415,0,
0.344328,-1,0,
0.260454,-0.756415,0,
0.344328,-1,0,
0.273616,-0.751754,0,
0.344328,-1,0,
0.273616,-0.751754,0,
0.36397,-1,0,
0.273616,-0.751754,0,
0.36397,-1,0,
0.286694,-0.746864,0,
0.36397,-1,0,
0.286694,-0.746864,0,
0.383864,-1,0,
0.286694,-0.746864,0,
0.383864,-1,0,
0.299685,-0.741747,0,
0.383864,-1,0,
0.299685,-0.741747,0,
0.404026,-1,0,
0.299685,-0.741747,0,
0.404026,-1,0,
0.312585,-0.736404,0,
0.404026,-1,0,
0.312585,-0.736404,0,
0.424475,-1,0,
0.312585,-0.736404,0,
0.424475,-1,0,
0.325389,-0.730836,0,
0.424475,-1,0,
0.325389,-0.730836,0,
0.445229,-1,0,
0.325389,-0.730836,0,
0.445229,-1,0,
0.338095,-0.725046,0,
0.445229,-1,0,
0.338095,-0.725046,0,
0.466308,-1,0,
0.338095,-0.725046,0,
0.466308,-1,0,
0.350697,-0.719035,0,
0.466308,-1,0,
0.350697,-0.719035,0,
0.487732,-1,0,
0.350697,-0.719035,0,
0.487732,-1,0,
0.363192,-0.712805,0,
0.487732,-1,0,
0.363192,-0.712805,0,
0.509525,-1,0,
0.363192,-0.712805,0,
0.509525,-1,0,
0.375577,-0.706358,0,
0.509525,-1,0,
0.375577,-0.706358,0,
0.531709,-1,0,
0.375577,-0.706358,0,
0.531709,-1,0,
0.387848,-0.699696,0,
0.531709,-1,0,
0.387848,-0.699696,0,
0.554309,-1,0,
0.387848,-0.699696,0,
0.554309,-1,0,
0.4,-0.69282,0,
0.554309,-1,0,
0.4,-0.69282,0,
0.57735,-1,0,
0.4,-0.69282,0,
0.57735,-1,0,
0.41203,-0.685734,0,
0.57735,-1,0,
0.41203,-0.685734,0,
0.60086,-1,0,
0.41203,-0.685734,0,
0.60086,-1,0,
0.423935,-0.678439,0,
0.60086,-1,0,
0.423935,-0.678439,0,
0.624869,-1,0,
0.423935,-0.678439,0,
0.624869,-1,0,
0.435711,-0.670936,0,
0.624869,-1,0,
0.435711,-0.670936,0,
0.649407,-1,0,
0.435711,-0.670936,0,
0.649407,-1,0,
0.447354,-0.66323,0,
0.649407,-1,0,
0.447354,-0.66323,0,
0.674508,-1,0,
0.447354,-0.66323,0,
0.674508,-1,0,
0.458861,-0.655322,0,
0.674508,-1,0,
0.458861,-0.655322,0,
0.700207,-1,0,
0.458861,-0.655322,0,
0.700207,-1,0,
0.470228,-0.647214,0,
0.700207,-1,0,
0.470228,-0.647214,0,
0.726542,-1,0,
0.470228,-0.647214,0,
0.726542,-1,0,
0.481452,-0.638908,0,
0.726542,-1,0,
0.481452,-0.638908,0,
0.753554,-1,0,
0.481452,-0.638908,0,
0.753554,-1,0,
0.492529,-0.630409,0,
0.753554,-1,0,
0.492529,-0.630409,0,
0.781285,-1,0,
0.492529,-0.630409,0,
0.781285,-1,0,
0.503456,-0.621717,0,
0.781285,-1,0,
0.503456,-0.621717,0,
0.809784,-1,0,
0.503456,-0.621717,0,
0.809784,-1,0,
0.51423,-0.612836,0,
0.809784,-1,0,
0.51423,-0.612836,0,
0.839099,-1,0,
0.51423,-0.612836,0,
0.839099,-1,0,
0.524847,-0.603768,0,
0.839099,-1,0,
0.524847,-0.603768,0,
0.869287,-1,0,
0.524847,-0.603768,0,
0.869287,-1,0,
0.535304,-0.594516,0,
0.869287,-1,0,
0.535304,-0.594516,0,
0.900404,-1,0,
0.535304,-0.594516,0,
0.900404,-1,0,
0.545599,-0.585083,0,
0.900404,-1,0,
0.545599,-0.585083,0,
0.932515,-1,0,
0.545599,-0.585083,0,
0.932515,-1,0,
0.555727,-0.575472,0,
0.932515,-1,0,
0.555727,-0.575472,0,
0.965689,-1,0,
0.555727,-0.575472,0,
0.965689,-1,0,
0.565685,-0.565685,0,
0.965689,-1,0,
0.565685,-0.565685,0,
1,-1,0,
0.565685,-0.565685,0,
1,-1,0,
0.575472,-0.555727,0,
1,-1,0,
0.575472,-0.555727,0,
1,-0.965689,0,
0.575472,-0.555727,0,
1,-0.965689,0,
0.585083,-0.545599,0,
1,-0.965689,0,
0.585083,-0.545599,0,
1,-0.932515,0,
0.585083,-0.545599,0,
1,-0.932515,0,
0.594516,-0.535305,0,
1,-0.932515,0,
0.594516,-0.535305,0,
1,-0.900404,0,
0.594516,-0.535305,0,
1,-0.900404,0,
0.603768,-0.524847,0,
1,-0.900404,0,
0.603768,-0.524847,0,
1,-0.869287,0,
0.603768,-0.524847,0,
1,-0.869287,0,
0.612836,-0.51423,0,
1,-0.869287,0,
0.612836,-0.51423,0,
1,-0.8391,0,
0.612836,-0.51423,0,
1,-0.8391,0,
0.621717,-0.503456,0,
1,-0.8391,0,
0.621717,-0.503456,0,
1,-0.809784,0,
0.621717,-0.503456,0,
1,-0.809784,0,
0.630409,-0.492529,0,
1,-0.809784,0,
0.630409,-0.492529,0,
1,-0.781286,0,
0.630409,-0.492529,0,
1,-0.781286,0,
0.638908,-0.481452,0,
1,-0.781286,0,
0.638908,-0.481452,0,
1,-0.753554,0,
0.638908,-0.481452,0,
1,-0.753554,0,
0.647214,-0.470228,0,
1,-0.753554,0,
0.647214,-0.470228,0,
1,-0.726543,0,
0.647214,-0.470228,0,
1,-0.726543,0,
0.655322,-0.458861,0,
1,-0.726543,0,
0.655322,-0.458861,0,
1,-0.700208,0,
0.655322,-0.458861,0,
1,-0.700208,0,
0.66323,-0.447354,0,
1,-0.700208,0,
0.66323,-0.447354,0,
1,-0.674509,0,
0.66323,-0.447354,0,
1,-0.674509,0,
0.670936,-0.435711,0,
1,-0.674509,0,
0.670936,-0.435711,0,
1,-0.649408,0,
0.670936,-0.435711,0,
1,-0.649408,0,
0.678438,-0.423935,0,
1,-0.649408,0,
0.678438,-0.423935,0,
1,-0.624869,0,
0.678438,-0.423935,0,
1,-0.624869,0,
0.685734,-0.412031,0,
1,-0.624869,0,
0.685734,-0.412031,0,
1,-0.600861,0,
0.685734,-0.412031,0,
1,-0.600861,0,
0.69282,-0.4,0,
1,-0.600861,0,
0.69282,-0.4,0,
1,-0.57735,0,
0.69282,-0.4,0,
1,-0.57735,0,
0.699696,-0.387848,0,
1,-0.57735,0,
0.699696,-0.387848,0,
1,-0.554309,0,
0.699696,-0.387848,0,
1,-0.554309,0,
0.706358,-0.375577,0,
1,-0.554309,0,
0.706358,-0.375577,0,
1,-0.53171,0,
0.706358,-0.375577,0,
1,-0.53171,0,
0.712805,-0.363192,0,
1,-0.53171,0,
0.712805,-0.363192,0,
1,-0.509526,0,
0.712805,-0.363192,0,
1,-0.509526,0,
0.719035,-0.350697,0,
1,-0.509526,0,
0.719035,-0.350697,0,
1,-0.487733,0,
0.719035,-0.350697,0,
1,-0.487733,0,
0.725046,-0.338095,0,
1,-0.487733,0,
0.725046,-0.338095,0,
1,-0.466308,0,
0.725046,-0.338095,0,
1,-0.466308,0,
0.730836,-0.325389,0,
1,-0.466308,0,
0.730836,-0.325389,0,
1,-0.445229,0,
0.730836,-0.325389,0,
1,-0.445229,0,
0.736404,-0.312585,0,
1,-0.445229,0,
0.736404,-0.312585,0,
1,-0.424475,0,
0.736404,-0.312585,0,
1,-0.424475,0,
0.741747,-0.299685,0,
1,-0.424475,0,
0.741747,-0.299685,0,
1,-0.404026,0,
0.741747,-0.299685,0,
1,-0.404026,0,
0.746864,-0.286694,0,
1,-0.404026,0,
0.746864,-0.286694,0,
1,-0.383864,0,
0.746864,-0.286694,0,
1,-0.383864,0,
0.751754,-0.273616,0,
1,-0.383864,0,
0.751754,-0.273616,0,
1,-0.36397,0,
0.751754,-0.273616,0,
1,-0.36397,0,
0.756415,-0.260455,0,
1,-0.36397,0,
0.756415,-0.260455,0,
1,-0.344328,0,
0.756415,-0.260455,0,
1,-0.344328,0,
0.760845,-0.247214,0,
1,-0.344328,0,
0.760845,-0.247214,0,
1,-0.32492,0,
0.760845,-0.247214,0,
1,-0.32492,0,
0.765044,-0.233897,0,
1,-0.32492,0,
0.765044,-0.233897,0,
1,-0.305731,0,
0.765044,-0.233897,0,
1,-0.305731,0,
0.769009,-0.22051,0,
1,-0.305731,0,
0.769009,-0.22051,0,
1,-0.286745,0,
0.769009,-0.22051,0,
1,-0.286745,0,
0.772741,-0.207055,0,
1,-0.286745,0,
0.772741,-0.207055,0,
1,-0.267949,0,
0.772741,-0.207055,0,
1,-0.267949,0,
0.776237,-0.193538,0,
1,-0.267949,0,
0.776237,-0.193538,0,
1,-0.249328,0,
0.776237,-0.193538,0,
1,-0.249328,0,
0.779496,-0.179961,0,
1,-0.249328,0,
0.779496,-0.179961,0,
1,-0.230868,0,
0.779496,-0.179961,0,
1,-0.230868,0,
0.782518,-0.166329,0,
1,-0.230868,0,
0.782518,-0.166329,0,
1,-0.212557,0,
0.782518,-0.166329,0,
1,-0.212557,0,
0.785302,-0.152647,0,
1,-0.212557,0,
0.785302,-0.152647,0,
1,-0.19438,0,
0.785302,-0.152647,0,
1,-0.19438,0,
0.787846,-0.138919,0,
1,-0.19438,0,
0.787846,-0.138919,0,
1,-0.176327,0,
0.787846,-0.138919,0,
1,-0.176327,0,
0.790151,-0.125148,0,
1,-0.176327,0,
0.790151,-0.125148,0,
1,-0.158385,0,
0.790151,-0.125148,0,
1,-0.158385,0,
0.792214,-0.111339,0,
1,-0.158385,0,
0.792214,-0.111339,0,
1,-0.140541,0,
0.792214,-0.111339,0,
1,-0.140541,0,
0.794037,-0.0974956,0,
1,-0.140541,0,
0.794037,-0.0974956,0,
1,-0.122785,0,
0.794037,-0.0974956,0,
1,-0.122785,0,
0.795618,-0.0836229,0,
1,-0.122785,0,
0.795618,-0.0836229,0,
1,-0.105104,0,
0.795618,-0.0836229,0,
1,-0.105104,0,
0.796956,-0.0697247,0,
1,-0.105104,0,
0.796956,-0.0697247,0,
1,-0.0874888,0,
0.796956,-0.0697247,0,
1,-0.0874888,0,
0.798051,-0.0558053,0,
1,-0.0874888,0,
0.798051,-0.0558053,0,
1,-0.0699269,0,
0.798051,-0.0558053,0,
1,-0.0699269,0,
0.798904,-0.0418688,0,
1,-0.0699269,0,
0.798904,-0.0418688,0,
1,-0.0524079,0,
0.798904,-0.0418688,0,
1,-0.0524079,0,
0.799513,-0.0279197,0,
1,-0.0524079,0,
0.799513,-0.0279197,0,
1,-0.0349209,0,
0.799513,-0.0279197,0,
1,-0.0349209,0,
0.799878,-0.013962,0,
1,-0.0349209,0,
0.799878,-0.013962,0,
1,-0.0174552,0,
};


HEngine::HEngine(): _deltatime(0.0f), _lasttime(0.0f) , _current_window(-1), _lastX(SCR_WIDTH / 2.0f), _lastY(SCR_HEIGHT / 2.0f), _firstMouse(true) {
	ini_window_setting();
	ini_stb_setting();
	ini_enging_setting();

}

GLFWwindow* HEngine::get_window_ptr(const int index) {
	check_splited(index, _windows);

	return _windows[index];
}

void HEngine::setup_magnifier() {
	glGenVertexArrays(1, &magnifier_VAO);
	glGenBuffers(1, &magnifier_VBO);
	glBindVertexArray(magnifier_VAO);


	glBindBuffer(GL_ARRAY_BUFFER, magnifier_VBO);
	glBufferData(GL_ARRAY_BUFFER, magnifier_vertices.size() * sizeof(float), &magnifier_vertices[0], GL_STATIC_DRAW);

	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3*sizeof(float), (void*)0);

	magnifier_shader = new HShader("./resources/shader/vs/magnifier.vert", "./resources/shader/fs/magnifier.frag");
}


void HEngine::insert_window(const unsigned int screen_width, const unsigned int screen_height, const char* title, GLFWmonitor* monitor, GLFWwindow* share) {
	GLFWwindow* created_window = glfwCreateWindow(screen_width, screen_height, title, monitor, share);
	if (created_window == nullptr)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		assert(0);
	}
	_windows.emplace_back(created_window);
}

int HEngine::current_window_index() {
	return _current_window;
}

void HEngine::set_current_window(int current_window) {
	check_splited(current_window, _windows);
	_current_window = current_window;
	glfwMakeContextCurrent(_windows[_current_window]);
	ini_glad();
	return;
}

void HEngine::set_framebuffersize_callback(int window_index, GLFWframebuffersizefun funptr) {
	check_splited(window_index, _windows);
	glfwSetFramebufferSizeCallback(_windows[window_index], funptr);
	return;
}

void HEngine::set_cursorpos_callback(int window_index, GLFWcursorposfun funptr) {
	check_splited(window_index, _windows);
	glfwSetCursorPosCallback(_windows[window_index], funptr);
}

void HEngine::set_scroll_callback(int window_index, GLFWscrollfun funptr) {
	check_splited(window_index, _windows);
	glfwSetScrollCallback(_windows[window_index], funptr);
}

void HEngine::set_mouse_button_callback(int window_index, GLFWmousebuttonfun funptr) {
	check_splited(window_index, _windows);
	glfwSetMouseButtonCallback(_windows[window_index], funptr);
}

void HEngine::set_cursor_hide(int window_index) {
	set_window_inputmode(window_index, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

}

void HEngine::draw_magnifier() {
	if (_is_magnifier_draw) {
		magnifier_shader->use();
		glBindVertexArray(magnifier_VAO);
		glDrawArrays(GL_TRIANGLES, 0, magnifier_vertices.size());
		glBindVertexArray(0);
	}
}

void HEngine::is_draw_magnifier(bool flag) {
	_is_magnifier_draw = flag;
}



void HEngine::set_window_inputmode(int window_index, int mode, int value) {
	check_splited(window_index, _windows);
	glfwSetInputMode(_windows[window_index], mode, value);
}

void HEngine::insert_shader(const char* vertex_path, const char* fragment_path, const char* geometry_path) {
	HShader* created_shader = new HShader(vertex_path, fragment_path, geometry_path);
	_shaders.emplace_back(created_shader);
	return;
}

HShader* HEngine::get_shader(int shader_index) {
	check_splited(shader_index, _shaders);

	return _shaders[shader_index];
}

void HEngine::create_map(string const& path) {
	_map = new HMap(path);
}

HMap* HEngine::get_map() {
	return _map;
}

/* Create hunter */
void HEngine::create_hunter(string const& path, const glm::vec3 front, const glm::vec3 up, const glm::vec3 right, const glm::vec3 worldup, float yaw, float pitch) {
	_hunter = new HHunter(path, front, up, right, worldup, yaw, pitch);

	_map->insert_model(_hunter);
}

/* Return the map */
HHunter* HEngine::get_hunter() {
	return _hunter;
}

void HEngine::insert_camera(glm::vec3 position, glm::vec3 up, float yaw, float pitch) {
	HCamera* created_camera = new HCamera(position, up, yaw, pitch);
	_cameras.emplace_back(created_camera);
	return;
}

HCamera* HEngine::get_camera(int camera_index) {
	check_splited(camera_index, _cameras);
	
	return _cameras[camera_index];
}

int HEngine::current_camera_index() {
	return _current_camera;
}

void HEngine::set_camera(int camera_index) {
	check_splited(camera_index, _cameras);
	
	_current_camera = camera_index;

	return;
}

void HEngine::insert_skybox(vector<float>& skyboxvertices, vector<string>& skyboxfaces) {
	HSkybox* created_skybox = new HSkybox(skyboxvertices, skyboxfaces);

	_skybox.emplace_back(created_skybox);

	return;
}

void HEngine::set_skybox(int skybox_index, string skybox_name) {
	check_splited(skybox_index, _skybox);

	_current_skybox = skybox_index;

	/* Bind Skybox and Shader*/
	for (unsigned int i = 0; i < _shaders.size(); i++) {
		_shaders[i]->use();
		_shaders[i]->setInt("skybox", SKYBOX_ID);
	}

	return;
}

HSkybox* HEngine::get_skybox(int skybox_index) {
	check_splited(skybox_index, _skybox);

	return _skybox[skybox_index];
}


void HEngine::insert_model(string const& path, bool gamma) {
	HModel* created_model = new HModel(path, gamma);

	_models.emplace_back(created_model);

	_map->insert_model(created_model);
}

HModel* HEngine::get_model(int model_index) {
	check_splited(model_index, _models);
	
	return _models[model_index];
}


/* Get the current mouse info */
void HEngine::get_mouse_xy(float& lastX, float& lastY) {
	lastX = _lastX;
	lastY = _lastY;
}

/* Set the current mouse info */
void HEngine::set_mouse_xy(float lastX, float lastY) {
	_lastX = lastX;
	_lastY = lastY;
}

/* Return is mouse first appeared */
bool HEngine::is_firstmouse() {
	return _firstMouse;
}

/* Set firstmosue */
void HEngine::set_firstmouse(bool firstMouse) {
	_firstMouse = firstMouse;
}


void HEngine::processInput() {
	GLFWwindow* window = _windows[_current_window];

	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);

	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS) 
		_hunter->move(Camera_Movement::FORWARD, _deltatime);
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		_hunter->move(Camera_Movement::BACKWARD, _deltatime);
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		_hunter->move(Camera_Movement::LEFT, _deltatime);
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		_hunter->move(Camera_Movement::RIGHT, _deltatime);

	_map->update_model(_hunter);

}

void HEngine::collision_detection() {
	vector<Model_Data> nearby;

	if (_hunter->is_need_detect_collision()) {
		nearby.clear();
		nearby = _map->get_model_nearby(_hunter, 0.10f);

		for (int i = 0; i < nearby.size(); i++) {
			if(nearby[i]._adjust_pos)
				nearby[i]._model->SetPosition(*nearby[i]._adjust_pos);

			Collision collision_type = get_collide_type(_hunter, nearby[i]._model);
			_hunter->Event(collision_type);
			nearby[i]._model->Event(collision_type);
		}
	}
	

}



void HEngine::clear_buffer() {
	glClearColor(0.05f, 0.05f, 0.05f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
}

void HEngine::run() {
	ini_render_setting();

	while (!glfwWindowShouldClose(_windows[_current_window])) {
		/* Process time */
		adjust_time();

		/* input */
		processInput();

		/* action */
		_hunter->Action(_map, _deltatime);

		for (unsigned int i = 0; i < _models.size(); i++)
			_models[i]->Action(_map, _deltatime);

		/* Event */
		collision_detection();


		glm::vec3 old_camera_position = _cameras[_current_camera]->Position;
		if (_is_magnifier_draw) {
			_cameras[_current_camera]->Position = _cameras[_current_camera]->Position + _cameras[_current_camera]->Front * glm::vec3(10.0f, 10.0f, 10.0f) - _cameras[_current_camera]->WorldUp * glm::vec3(5.0f, 5.0f, 5.0f);
		}

		/* clear */
		clear_buffer();


		/* render map */
		_map->Draw();

		_hunter->Draw();

		//for (unsigned int i = 0; i < _models.size(); i++)
		//	_models[i]->Draw();

		draw_magnifier();

		_cameras[_current_camera]->Position = old_camera_position;

		/* render skybox */
		_skybox[_current_skybox]->Draw();

		/* swap buffers and poll IO events */
		glfwSwapBuffers(_windows[_current_window]);
		glfwPollEvents();
	}

	_windows.erase(_windows.begin()+_current_window);
}

void HEngine::terminate() {
	_windows.clear();
	_models.clear();
	_shaders.clear();
	_cameras.clear();
	_skybox.clear();

	glfwTerminate();
}

void HEngine::ini_window_setting() {
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); 
#ifdef __APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif
}

void HEngine::ini_stb_setting() {
	stbi_set_flip_vertically_on_load(true);
}

void HEngine::ini_render_setting() {
	glEnable(GL_DEPTH_TEST);
}

void HEngine::ini_glad() {
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		assert(0);
	}
}

void HEngine::ini_enging_setting() {
	;
}


void HEngine::adjust_time() {
	_currenttime = static_cast<float>(glfwGetTime());
	_deltatime = _currenttime - _lasttime;
	_lasttime = _currenttime;
}

template <class T>
void HEngine::check_splited(int index, vector<T> vec) {
	if (index < 0 || index >= vec.size()) {
		cout << "ERROR::HENGINE::SPLITED:: the index given: " << index << " is splited. Current size: " << vec.size() << endl;
		assert(0);
	}
}

Collision HEngine::get_collide_type(HModel* model1, HModel* model2)
{
	bool collide_bool = false;
	vector<int> model_1_meshes_index, model_2_meshes_index;

	HCollider* a = model1->get_collider();
	HCollider* b = model2->get_collider();

	vector<glm::vec3> Points1(8);
	vector<glm::vec3> Points2(8);

	glm::mat4 wvp1 = model1->GetPositionMat() * model1->GetRotationMat() * model1->GetScalingMat();
	glm::mat4 wvp2 = model2->GetPositionMat() * model2->GetRotationMat() * model2->GetScalingMat();


	for (int i = 0; i < 8; i++) {
		Points1[i] = glm_vec4_to_glm_vec3(wvp1 * glm::vec4(a->get_Points(i), 1.0f));
		Points2[i] = glm_vec4_to_glm_vec3(wvp2 * glm::vec4(b->get_Points(i), 1.0f));
	}

	//show_mat4(wvp1, "wvp1");
	//show_mat4(wvp2, "wvp2");
	/*for(int i = 0; i<2; i++)
		cout << "Points1: " << Points1[i].x << ", " << Points1[i].y << ", " << Points1[i].z << endl;
	for(int i = 0; i<2; i++)
		cout << "Points2: " << Points2[i].x << ", " << Points2[i].y << ", " << Points2[i].z << endl;*/
	
	collide_bool = if_collide(Points1, Points2);
	
	//if(collide_bool)
	 //cout << "Big Box detection" << endl;

	if (collide_bool)
	{
		collide_bool = false;
		for (int i = 0; i < model1->get_meshes().size(); i++)
		{
			a = model1->get_meshes()[i].ini_collider;
			wvp1 = model1->get_meshes()[i].mesh_transform_mat;
			for (int j = 0; j < model2->get_meshes().size(); j++)
			{
				b = model2->get_meshes()[j].ini_collider;
				wvp2 = model2->get_meshes()[j].mesh_transform_mat;

				for (int k = 0; k < 8; k++) {
					Points1[k] = glm_vec4_to_glm_vec3(wvp1 * glm::vec4(a->get_Points(i), 1.0f));
					Points2[k] = glm_vec4_to_glm_vec3(wvp2 * glm::vec4(b->get_Points(i), 1.0f));
				}

				if (if_collide(Points1, Points2)) {
					collide_bool = true;
					model_1_meshes_index.emplace_back(i);
					model_2_meshes_index.emplace_back(j);
				}
			}
		}
	}

	return Collision(collide_bool, model1, model2, model_1_meshes_index, model_2_meshes_index);
}

bool HEngine::if_collide(vector<glm::vec3> Points1, vector<glm::vec3> Points2)
{
	glm::vec3 fs[6];

	int plane[6][4] = { {0,1,3,2},{0,1,5,4},{0,2,6,4},{7,6,2,3},{5,7,3,1},{5,7,6,4} };

	fs[0] = glm::normalize(Points1[1] - Points1[0]);
	fs[1] = glm::normalize(Points1[2] - Points1[0]);
	fs[2] = glm::normalize(Points1[4] - Points1[0]);
	fs[3] = glm::normalize(Points2[1] - Points2[0]);
	fs[4] = glm::normalize(Points2[2] - Points2[0]);
	fs[5] = glm::normalize(Points2[4] - Points2[0]);

	int flagtime = 0;
	int flag = true;
	for (size_t i = 0; i < 6; i++)
	{
		for (size_t j = i + 1; j < 6; j++) {

			flagtime = 0;
			flag = true;
			for (size_t i1 = 0; i1 < 6; i1++)
			{
				for (size_t j1 = 0; j1 < 6; j1++) {
					glm::vec2 p1[4];
					glm::vec2 p2[4];
					for (size_t p = 0; p < 4; p++)
					{
						glm::vec2 v1 = glm::vec2(glm::dot(Points1[plane[i1][p]], fs[i]), glm::dot(Points1[plane[i1][p]], fs[j]));
						p1[p] = v1;
						glm::vec2 v2 = glm::vec2(glm::dot(Points2[plane[j1][p]], fs[i]), glm::dot(Points2[plane[j1][p]], fs[j]));
						p2[p] = v2;

					}
					if (!inspection_2D(p1, p2))
					{
						flag = false;
						break;
					}
					else flagtime++;
				}

				if (!flag) break;
			}
			if (flagtime == 36)
			{
				return false;
			}
		}
	}
	return true;

}

bool HEngine::inspection_2D(glm::vec2* p1, glm::vec2* p2)
{
	glm::vec2 fs[4];


	glm::vec2 temp1 = glm::vec2(p1[1][1] - p1[0][1], p1[0][0] - p1[1][0]);
	fs[0] = glm::normalize(temp1);

	glm::vec2 temp2 = glm::vec2(p1[3][1] - p1[0][1], p1[0][0] - p1[3][0]);
	fs[1] = glm::normalize(temp2);

	glm::vec2 temp3 = glm::vec2(p2[1][1] - p2[0][1], p2[0][0] - p2[1][0]);
	fs[2] = glm::normalize(temp3);

	glm::vec2 temp4 = glm::vec2(p2[3][1] - p2[0][1], p2[0][0] - p2[3][0]);
	fs[3] = glm::normalize(temp4);


	for (size_t i = 0; i < 4; i++)
	{
		double p1_min, p1_max;
		double p2_min, p2_max;
		for (size_t j = 0; j < 4; j++) {
			if (j == 0)
			{
				p1_min = glm::dot(p1[0], fs[i]);
				p1_max = glm::dot(p1[0], fs[i]);
			}
			else
			{
				if (glm::dot(p1[j], fs[i]) > p1_max)
				{
					p1_max = glm::dot(p1[j], fs[i]);
				}

				if (glm::dot(p1[j], fs[i]) < p1_min)
				{
					p1_min = glm::dot(p1[j], fs[i]);
				}
			}
		}
		for (size_t j = 0; j < 4; j++) {
			if (j == 0)
			{
				p2_min = glm::dot(p2[0], fs[i]);
				p2_max = glm::dot(p2[0], fs[i]);
			}
			else
			{
				if (glm::dot(p2[j], fs[i]) > p2_max)
				{
					p2_max = glm::dot(p2[j], fs[i]);
				}

				if (glm::dot(p2[j], fs[i]) < p2_min)
				{
					p2_min = glm::dot(p2[j], fs[i]);
				}
			}
		}

		if (p1_max < p2_min || p2_max < p1_min)
		{
			return true;
		}
	}
	return false;
}